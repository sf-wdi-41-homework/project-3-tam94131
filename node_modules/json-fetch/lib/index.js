'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.retriers = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var retryFetch = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(requestUrl, jsonFetchOptions) {
    var _this = this;

    var shouldRetry, retryOptions, requestOptions, response;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            shouldRetry = jsonFetchOptions.shouldRetry || DEFAULT_SHOULD_RETRY;
            retryOptions = (0, _assign2.default)({}, DEFAULT_RETRY_OPTIONS, jsonFetchOptions.retry);
            requestOptions = (0, _get_request_options2.default)(jsonFetchOptions);
            _context3.prev = 3;
            _context3.next = 6;
            return (0, _promiseRetry2.default)(function () {
              var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(throwRetryError) {
                var res;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.prev = 0;
                        _context2.next = 3;
                        return fetch(requestUrl, requestOptions);

                      case 3:
                        res = _context2.sent;

                        if (shouldRetry(res)) throwRetryError();
                        return _context2.abrupt('return', res);

                      case 8:
                        _context2.prev = 8;
                        _context2.t0 = _context2['catch'](0);

                        if (_context2.t0.code !== 'EPROMISERETRY' && shouldRetry(_context2.t0)) throwRetryError(_context2.t0);
                        throw _context2.t0;

                      case 12:
                      case 'end':
                        return _context2.stop();
                    }
                  }
                }, _callee2, _this, [[0, 8]]);
              }));

              return function (_x5) {
                return _ref3.apply(this, arguments);
              };
            }(), retryOptions);

          case 6:
            response = _context3.sent;
            return _context3.abrupt('return', response);

          case 10:
            _context3.prev = 10;
            _context3.t0 = _context3['catch'](3);

            _context3.t0.name = 'FetchError';
            throw _context3.t0;

          case 14:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this, [[3, 10]]);
  }));

  return function retryFetch(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

var createJsonFetchResponse = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(response) {
    var responseText;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return response.text();

          case 2:
            responseText = _context4.sent;
            return _context4.abrupt('return', {
              status: response.status,
              statusText: response.statusText,
              headers: response.headers,
              text: responseText,
              body: getResponseBody(response, responseText)
            });

          case 4:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, this);
  }));

  return function createJsonFetchResponse(_x6) {
    return _ref4.apply(this, arguments);
  };
}();

var _retriers = require('./retriers');

Object.defineProperty(exports, 'retriers', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_retriers).default;
  }
});

require('isomorphic-fetch');

var _promiseRetry = require('promise-retry');

var _promiseRetry2 = _interopRequireDefault(_promiseRetry);

var _get_request_options = require('./get_request_options');

var _get_request_options2 = _interopRequireDefault(_get_request_options);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_RETRY_OPTIONS = { retries: 0 };
var DEFAULT_SHOULD_RETRY = function DEFAULT_SHOULD_RETRY() {
  return false;
};

exports.default = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(requestUrl) {
    var jsonFetchOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var expectedStatuses, response, jsonFetchResponse;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            expectedStatuses = jsonFetchOptions.expectedStatuses;
            _context.prev = 1;
            _context.next = 4;
            return retryFetch(requestUrl, jsonFetchOptions);

          case 4:
            response = _context.sent;
            _context.next = 7;
            return createJsonFetchResponse(response);

          case 7:
            jsonFetchResponse = _context.sent;

            assertExpectedStatus(expectedStatuses, jsonFetchResponse);
            return _context.abrupt('return', jsonFetchResponse);

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](1);

            _context.t0.request = getErrorRequestData({ requestUrl: requestUrl, requestOptions: jsonFetchOptions });
            throw _context.t0;

          case 16:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[1, 12]]);
  }));

  function jsonFetch(_x) {
    return _ref.apply(this, arguments);
  }

  return jsonFetch;
}();

function createErrorResponse(response, responseText) {
  // do not include headers as they potentially contain sensitive information
  return {
    status: response.status,
    statusText: response.statusText,
    text: responseText
  };
}

function getResponseBody(response, responseText) {
  if (isApplicationJson(response.headers)) try {
    return JSON.parse(responseText);
  } catch (err) {
    err.response = createErrorResponse(response, responseText);
    throw err;
  }
  return undefined;
}

function isApplicationJson(headers) {
  var responseContentType = headers.get('Content-Type') || '';
  return (/application\/json/.test(responseContentType)
  );
}

function assertExpectedStatus(expectedStatuses, jsonFetchResponse) {
  if (Array.isArray(expectedStatuses) && expectedStatuses.indexOf(jsonFetchResponse.status) === -1) {
    var err = new Error('Unexpected fetch response status ' + jsonFetchResponse.status);
    err.name = 'FetchUnexpectedStatusError';
    // $FlowFixMe
    err.response = jsonFetchResponse;
    throw err;
  }
}

function getErrorRequestData(_ref5) {
  var requestUrl = _ref5.requestUrl,
      requestOptions = _ref5.requestOptions;

  var data = (0, _assign2.default)({}, requestOptions, { url: requestUrl });
  // do not include headers as they potentially contain sensitive information
  delete data.headers;
  return data;
}